#/bin/sh

DIALOG=${DIALOG=dialog}
BFW_SOURCE="/mnt"
BFW_DEST="/mnt"
INSTDIR="/tmp/install"
TITLE="BrazilFW Installer 2.0" 
TITLESPACE="$TITLE [ \Z3Use \Z1<SPACE BAR>\Z3 to select\Z2 ]"
rm -f /tmp/install.log 2>/dev/null
. /tmp/boot.info

isnumeric() {
  ISNUMERIC=`echo $1 | sed s/[0123456789]//g`
  [ -n "$ISNUMERIC" ] && echo "1" || echo "0"
}

rlign() {
  lenght=${#1}
  if [ "$lenght" = $2 ]; then
     echo "$1"
     exit 0
  fi
  var=""
  for POS in $(seq $((lenght+1)) $2); do
      var=$var"\\040"
  done
  echo $1$var
}

llign() {
  lenght=${#1}
  if [ "$lenght" = $2 ]; then
     echo "$1"
     exit 0
  fi
  var=""
  for POS in $(seq $((lenght+1)) $2); do
      var=$var"\\040"
  done
  echo $var$1
}


ABORT() {
echo ""
}

CANCEL() {
echo ""
}

MSGBOX() {
$DIALOG --colors --backtitle "$TITLE" --title "\Z1ERROR\Z0" --msgbox "\n$1" 7 60
}

YESNO() {
$DIALOG --stdout --no-collapse --cr-wrap --colors --backtitle "$TITLE" --yesno "$1" $2 $3
echo $?
}


WAIT() {
if [ -n "$1" ]; then
   rm -f /tmp/TMP.done 2>/dev/null
   (while [ ! -e "/tmp/TMP.done" ]; do
   if [ -n "$3" ]; then
      INITVAR="\\ - / |"
      POS=$((POS+1))
      ANIMATION=`echo $INITVAR | cut -f$POS -d" "`
      [ "$POS" = 4 ] && POS=0
   else
      ANIMATION=""
   fi   
   $DIALOG --sleep 1 --colors --backtitle "$TITLE" --infobox "\n\Z3$2\Z0 $ANIMATION" 5 40
   done) &
   else
   touch "/tmp/TMP.done";wait;rm -f /tmp/TMP.done 2>/dev/null
fi
}

BFW_DETECTHD() {
BOOTDEVICE=`cat /tmp/boot.info | grep -i "DEVICE" | sed 's/.*DEVICE=\"//g;s/\".*//g;s/[0123456789]//g'`
IDENTIFY=0
ANIM=0
cat /proc/partitions | while read x x LENGHT DEVICE; do
DETECT=0
    case $DEVICE in
         hd?) 
            if [ "$(cat /proc/ide/$DEVICE/media)" = "disk" ]; then
               TYPE="PATA"
               MODEL=`cat /proc/ide/$DEVICE/model`
               DETECT=1 
               IDENTIFY=$((IDENTIFY+1))
            fi;;
         sd?)
            INFO=`scsi_info /dev/$DEVICE 2>/dev/null`
            HOST=`echo $INFO | sed 's/.*HOST=\"//g;s/\".*//g'`
            MODEL=`echo $INFO | sed 's/.*MODEL=\"//g;s/\".*//g'`
            ls /proc/scsi/usb*/$HOST 2>/dev/null 1>/dev/null
            if [ "$?" = 0 ]; then
               if [ "$(echo $MODEL | grep -c -i "Flash Disk")" = 1 ]; then
                  TYPE="PENDRIVE"
               else
                  TYPE="HDD USB"
               fi   
            elif [ "$(echo $MODEL | cut -f1 -d" ")" = "ATA" ]; then
               TYPE="SATA"
            else
               TYPE="SCSI"
            fi
            DETECT=1
            IDENTIFY=$((IDENTIFY+1));;
    esac

if [ "$DETECT" = 1 ]; then
   SPACE=$((LENGHT/1024))
   INFO=`sfdisk -g /dev/$DEVICE 2>/dev/null`
   CYL=`echo $INFO | cut -f2 -d" "`
   HEAD=`echo $INFO | cut -f4 -d" "`
   SECT=`echo $INFO | cut -f6 -d" "`
   echo "$IDENTIFY#$TYPE#$MODEL#$DEVICE#$SPACE#$CYL#$HEAD#$SECT"
fi
done     
}

CP() {
     nfiles=0
     afiles=1
     for files in $(ls $2); do
         nfiles=$((nfiles+1))
     done
     ( for files in $(ls $2); do
           echo "XXX"
           echo "$1 $(basename "$files")"
           echo "XXX"
           echo $((afiles*100/nfiles));afiles=$((afiles+1))
           [ -e "$files" ] && cp "$files" "$3/$(basename "$files")"
       done) | $DIALOG --sleep 1 --title "$4" --colors --gauge " " 8 50 0
}

CHECK_BFW() {
     mount -o ro /dev/$HD"1" $BFW_DEST -t vfat 2>/dev/null
     if [ "$?" = 0 ]; then
        if [ -e "$BFW_DEST/config/coyote.cfg" ]; then
           if [ -e "$BFW_DEST/brazilfw.dpy" ]; then 
              version="v"`cat "$BFW_DEST"/brazilfw.dpy | grep -i "^BrazilFW" | sed s/[^0123456789.]//g`
           elif [ -e "$BFW_DEST/syslinux.dpy" ]; then
              version="v"`cat "$BFW_DEST"/syslinux.dpy | grep -i "^BrazilFW" | sed s/[^0123456789.]//g`
           fi
        fi
        umount $BFW_DEST 2>/dev/null
     fi
}
          
LOAD_FILES() {
    umount $INSTDIR 2>/dev/null
    rm -rf $INSTDIR 2>/dev/null
    mkdir $INSTDIR
    mount tmpfs $INSTDIR -t tmpfs -o size=32M
    mkdir -p $INSTDIR/temp/config/profiles 2>/dev/null
    umount $BFW_SOURCE 2>/dev/null
    mount -o ro $DEVICE $BFW_SOURCE -t $FSTYPE 2>/dev/null
    if [ "$?" != 0 ]; then
       ERROR 1
       ABORT
    else
       for FILES in `ls $BFW_SOURCE/*.tgz`; do
           FILES=`basename $FILES .tgz`
           echo $FILES >> $INSTDIR/pkg.list
       done   
       CPTITLE="Reading BrazilFW files"
       CP "Copying Addons..." "$BFW_SOURCE/*.tgz" "$INSTDIR/temp" "$CPTITLE"
       CP "Copying Config files..." "$BFW_SOURCE/config/*.*" "$INSTDIR/temp/config" "$CPTITLE"
       [ -e "$BFW_SOURCE/config/profile" ] && CP "\nCopying Profiles..." "$BFW_SOURCE/config/profiles/*.*" "$INSTDIR/temp/config/profiles" "$CPTITLE"
       CP "Copying Files..." "$BFW_SOURCE/*.dpy" "$INSTDIR/temp" "$CPTITLE"
       CP "Copying Kernel..." "$BFW_SOURCE/linux" "$INSTDIR/temp" "$CPTITLE"
       WAIT " " "Wait..."
       umount $BFW_SOURCE 2>/dev/null
       WAIT ""
       if [ "$upgrade" = "yes" ]; then
          mount -o ro /dev/"$HD"1 $BFW_DEST -t vfat 2>/dev/null
          if [ "$?" = 0 ]; then
             WAIT " " "Saving current configuration..." " "
             cp -a $BFW_DEST/config/* $INSTDIR/temp/config 2>/dev/null
             for F in `ls $BFW_DEST/*.tgz` ; do
                 F=`basename $F .tgz`
                 if [ -n "`grep $F /var/lib/lrpkg/addons.obsolete`" ]; then
                    echo $F >> $INSTDIR/pkg.list3
                    have_obsolete=yes
                 fi
             done
             if [ "$have_obsolete" = "yes" ]; then
                echo "The following obsolete add-ons were found on current installation" >> /tmp/install.log
                echo "and will be deleted." >> /tmp/install.log
                cat $INSTDIR/pkg.list3 >> /tmp/install.log
                echo >> /tmp/install.log
             else
                touch $INSTDIR/pkg.list3
             fi
             for F in `ls $BFW_DEST/*.tgz` ; do
                 F=`basename $F .tgz`
                 if [ -z "`grep $F $INSTDIR/pkg.list`" -a -z "`grep $F $INSTDIR/pkg.list3`" ]; then
                    echo $F >> $INSTDIR/pkg.list2
                    have_addons=yes
                 fi
             done   
             if [ "$have_addons" = "yes" ]; then
                echo "The following upgradable add-ons were found on current installation" >> /tmp/install.log
                cat $INSTDIR/pkg.list2 >> /tmp/install.log
                echo >> /tmp/install.log
                cat $INSTDIR/pkg.list2 | while read F; do
                    cp $BFW_DEST/$F.tgz $INSTDIR/temp 2>/dev/null
                done
             fi
             umount $BFW_DEST 2>/dev/null
             WAIT ""
          fi
       fi
    fi
}

SAVE_FILES() {
    umount $BFW_DEST 2>/dev/null
    mount -o rw $partition $BFW_DEST -t vfat 2>/dev/null
    if [ "$?" != 0 ]; then
       ERROR 1
       ABORT
    else
       mkdir -p $BFW_DEST/config/profiles 2>/dev/null
       CPTITLE="Writing BrazilFW files"
       CP "Copying Addons..." "$INSTDIR/temp/*.tgz" "$BFW_DEST" "$CPTITLE"
       CP "Copying Config files..." "$INSTDIR/temp/config/*.*" "$BFW_DEST/config" "$CPTITLE"
       [ -e "$INSTDIR/temp/config/profile" ] && CP "\nCopying Profiles..." "$INSTDIR/temp/config/profiles/*.*" "$BFW_DEST/config/profiles" "$CPTITLE"
       CP "Copying Files..." "$INSTDIR/temp/*.dpy" "$BFW_DEST" "$CPTITLE"
       CP "Copying Kernel..." "$INSTDIR/temp/linux" "$BFW_DEST" "$CPTITLE"
       WAIT " " "Wait..."
       umount $BFW_DEST 2>/dev/null
       rm -fr $INSTDIR/temp 2>/dev/null
       umount $INSTDIR 2>/dev/null
       rm -fr $INSTDIR
       WAIT ""
    fi
}

LISTHD() {
WAIT " " "Finding devices..."
EXISTHD=`BFW_DETECTHD`
if [ "${#EXISTHD}" != 0 ]; then
   SELECT=ON 
   exec 3>&1
   echo -en "value=\`\$DIALOG --colors --no-collapse --backtitle \"$TITLESPACE\" --radiolist \"Choose the hard disk you want to install the BrazilFW:\n-----------------------------------------------------------------------\n \Z4DEVICE   TYPE                  MODEL                        CAPACITY\Z0\" 16 76 7 \\
        $(BFW_DETECTHD | while read INFO; do
                       ID=$(echo $INFO | cut -f1 -d"#")
                       TYPE=$(echo $INFO | cut -f2 -d"#")
                       MODEL=$(echo $INFO | cut -f3 -d"#")
                       SPACE=$(echo $INFO | cut -f5 -d"#")
                       echo \"$ID\" \"$(rlign "$TYPE" 9) $(rlign "$MODEL" 38) $(llign "$SPACE MB" 12)\" "$SELECT \\"
                       SELECT="OFF"
                       done)#2>&1 1>&3\`" | sed s/\\\\#//g > /tmp/listhd.exec
   WAIT ""
   . /tmp/listhd.exec
   response=$?
   exec 3>&-
   rm -f /tmp/listhd.exec
   if [ "$response" = 0 ]; then
      INFORMATION=`BFW_DETECTHD | grep -i "^$value\>"`
      TYPE=`echo $INFORMATION | cut -f2 -d"#"`
      HD=`echo $INFORMATION | cut -f4 -d"#"`
      MODEL=`echo $INFORMATION | cut -f3 -d"#"`
      CYL=`echo $INFORMATION | cut -f6 -d"#"`
      HEAD=`echo $INFORMATION | cut -f7 -d"#"`
      SECT=`echo $INFORMATION | cut -f8 -d"#"`
      SIZE=`echo $INFORMATION | cut -f5 -d"#"`
      BFW_INSTALLTYPE
   else
      CANCEL
   fi
else
   WAIT ""
   $DIALOG --ok-label "EXIT" --colors --backtitle "$TITLE" --msgbox "\n\Z1There isn't any hard disk installed in this computer\nIf you plugged one already check the cables and be sure\nit was detected by the BIOS.\Z0" 9 60
   clear
   exit
fi
}

BFW_INSTALLTYPE() {
CHECK_BFW
  INST_MESS1="Repair Installation"
  INST_MESS2="Upgrade with format"
  INST_MESS3="Upgrade without format"
  INST_MESS4="New Installation"
  INST_MESS5="Clone Installation"
  
  if [ -n "$version" -a "$DEVICE" = "/dev/$HD"1"" ]; then
     INSTALLTYPE=`echo \"1\" \"$INST_MESS1\" ON`
     
  elif [ -n "$version" -a "$MEDIA" = "CDROM" ]; then
     INSTALLTYPE=`echo \"2\" \"$INST_MESS2\" OFF \"3\" \"$INST_MESS3\" ON \"4\" \"$INST_MESS4\" OFF`
  elif [ -n "$version" -a "$MEDIA" != "CDROM" ]; then
     INSTALLTYPE=`echo \"2\" \"$INST_MESS2\" OFF \"3\" \"$INST_MESS3\" ON \"5\" \"$INST_MESS5\" OFF`     
  elif [ -z "$version" -a "$MEDIA" != "CDROM" ]; then
     INSTALLTYPE=`echo \"5\" \"$INST_MESS5\" ON`
  else
     INSTALLTYPE=`echo \"4\" \"$INST_MESS4\" ON`
  fi
  [ -n "$version" ] && INSTALLTITLE="\Z0Device:\Z2 $HD\Z0, Type:\Z2 $TYPE\Z0, Size:\Z2 $SIZE MB\Z0\nFound BrazilFW $version.\n" || INSTALLTITLE="\Z0Device:\Z2 $HD\Z0, Type:\Z2 $TYPE\Z0, Size:\Z2 $SIZE MB\Z0"
  value=`eval $DIALOG --stdout --extra-button --extra-label "Back" --colors --no-collapse --title \"[$MODEL]\" --backtitle \"$TITLESPACE\" --radiolist \"$INSTALLTITLE\" 11 50 3 $INSTALLTYPE` 
  response=$?
  case $response in
       0)
         case $value in
              1)FIRSTPARTITION;;
              2)upgrade=yes;FIRSTPARTITION;;
              3)upgrade=yes;BFW_NOFORMAT;;
              4)FIRSTPARTITION;;
              5)FIRSTPARTITION;;
         esac;;
       1) QUIT;;
       3) LISTHD;;
  esac
}

FIRSTPARTITION() {
  value=`$DIALOG --colors --stdout --extra-button --extra-label "Back" --backtitle "$TITLE" --title "Bootable partition" --mixedform "\nSet the size of partition in Megabytes.\n\Z3[blank assume default]\Z0" 0 0 0 "Size (Default 40 MB)..:" 1 1 " " 1 24 25 4 0`
  response=$?
  min_part=$((HEAD*SECT/2048))
  case $response in
       0)
            if [ "${#value}" = 1 ]; then
               mbs="40"
               yesno=$(YESNO "If you are planning to install some proxy cache to this\nBrazilFW you can create a second partition using the\nrest o this Device.\n\n\Z1Do you want do create a second partition ?\Z0" 9 60)
               [ "$yesno" = 0 ] && { use_cache=yes;SECONDPARTITION; } || { use_cache=no;BFW_GOFORMAT; }
          elif [ "$(isnumeric $value)" = 1 ]; then
               MSGBOX "Valid only numbers !!!"
               FIRSTPARTITION
          elif [ "$value" -lt 8 ]; then
               MSGBOX "Too little. Set at least 8 Megabytes"
               FIRSTPARTITION
          elif [ "$value" -lt "$min_part" ]; then
               MSGBOX "Too little.\nThe smaller partition for this hd is $min_part MB"
               FIRSTPARTITION
          elif [ "$value" -gt "$SIZE" ]; then
               MSGBOX "Too big. The hd has only $SIZE MB"
               FIRSTPARTITION             
          else
               mbs="$value"
               yesno=$(YESNO "If you are planning to install some proxy cache to this\nBrazilFW you can create a second partition using the\nrest o this Device.\n\n\Z1Do you want do create a second partition ?\Z0" 9 60)
               [ "$yesno" = 0 ] && { use_cache=yes;SECONDPARTITION; } || { use_cache=no;BFW_GOFORMAT; }
          fi;;
       1) QUIT;;
       3) BFW_INSTALLTYPE;;
  esac
}

SECONDPARTITION() {
  cyl_first=$(((mbs*1024)/(HEAD*SECT/2)))
  cyl_remaining=$((CYL-cyl_first))
  default_mbs_cache=$((cyl_remaining*HEAD*SECT/2048))
  value=`$DIALOG --colors --stdout --extra-button --extra-label "Back" --backtitle "$TITLE" --title "Cache partition" --mixedform "\nSet the size of partition in Megabytes.\n\Z3[blank assume default ($default_mbs_cache MB)]\Z0" 0 0 0 "Size..................:" 1 1 " " 1 24 25 10 0`
  response=$?
  case $response in
       0)
            if [ "${#value}" = 1 ]; then
               mbs_cache="$default_mbs_cache"
               BFW_GOFORMAT
          elif [ "$(isnumeric $value)" = 1 ]; then
               MSGBOX "Valid only numbers !!!"
               SECONDPARTITION
          elif [ "$value" -lt 3 ]; then
               MSGBOX "Too little. Set at least 3 Megabytes"
               SECONDPARTITION
          elif [ "$value" -lt "$min_part" ]; then
               MSGBOX "Too little.\nThe smaller partition for this hd is $min_part MB"
               SECONDPARTITION
          elif [ "$value" -gt "$default_mbs_cache" ]; then
               MSGBOX "Too big. The hd has only $default_mbs_cache MB"
               SECONDPARTITION             
          else
               mbs_cache="$value"
               BFW_GOFORMAT
          fi;;         
       1)QUIT;;
       3)FIRSTPARTITION;;
  esac
}

BFW_NOFORMAT() {
LOAD_FILES
partition="/dev/$HD"1
cache_partition="$HD"2
WAIT " " "Creating DOS file system..." " "
mkdosfs $partition >> /tmp/install.log 2>&1
WAIT ""
WAIT " " "Installing Boot Loader..." " "
syslinux -s $partition >> /tmp/install.log 2>&1
WAIT ""
exist=`cat /proc/partitions | grep -c -i "$cache_partition\>"`
if [ "$exist" = 1 ]; then
   cache_partition="/dev/$cache_partition"
   umount $BFW_DEST 2>/dev/null
   WAIT " " "Creating Journaling (ext3)..." " "
   mount $partition_cache $BFW_DEST >> /tmp/install.log 2>&1
   if [ "$?" = 0 ]; then
      /bin/tune2fs -c 0 -i 0 -j -O dir_index $partition_cache >> /tmp/install.log 2>&1
      umount $BFW_DEST 2>/dev/null
      WAIT ""
      WAIT " " "Setting directory indices..." " "
      /bin/e2fsck -y -f -D $partition_cache >> /tmp/install.log 2>&1
      WAIT ""
   fi
   WAIT ""   
fi
SAVE_FILES
}

BFW_GOFORMAT() {
yesno=$(YESNO "\Z1ATTENTION !!!\Z0\n\nThis device will be partitioned and formated now.\nIf you go on any data stored on it will be permanently destroyed.\n\n\Z1Are you sure you want to do this?\Z0" 11 72)
if [ "$yesno" = 1 ]; then
   [ "$use_cache" = "yes" ] && SECONDPARTITION || FIRSTPARTITION
else
   LOAD_FILES
   cyl_boot=$(((mbs*1024)/(HEAD*SECT/2)))
   command="0,$cyl_boot,b,*"
   partition="/dev/$HD"1
   if [ "$use_cache" = "yes" ]; then
      partition_cache="/dev/$HD"2
      cyl_cache=$(((mbs_cache*1024)/(HEAD*SECT/2)))
      command="$command\n,$cyl_cache,83,"
   fi
   WAIT " " "Cleaning MBR..." " "
   dd if=/bin/clean.mbr of=/dev/$HD count=1 >> /tmp/install.log 2>&1
   WAIT ""
   
   WAIT " " "Partitioning..." " "
   echo -e $command | sfdisk -q /dev/$HD >> /tmp/install.log 2>&1
   WAIT ""

   WAIT " " "Creating DOS file system..." " "
   mkdosfs $partition >> /tmp/install.log 2>&1
   WAIT ""
   
   if [ "$use_cache" = "yes" ]; then
      WAIT " " "Creating second partition..." " "
      /bin/mke2fs -q -F -m 0 -s 1 $partition_cache >> /tmp/install.log 2>&1
      WAIT ""
      WAIT " " "Creating Journaling (ext3)..." " "
      mount $partition_cache $BFW_DEST >> /tmp/install.log 2>&1
      if [ "$?" = 0 ]; then
         /bin/tune2fs -c 0 -i 0 -j -O dir_index $partition_cache >> /tmp/install.log 2>&1
         umount $BFW_DEST 2>/dev/null
         WAIT ""
         WAIT " " "Setting directory indices..." " "
         /bin/e2fsck -y -f -D $partition_cache >> /tmp/install.log 2>&1
         WAIT ""
      fi
      WAIT ""
   fi         
   
   WAIT " " "Installing Boot Loader..." " "
   syslinux -s $partition >> /tmp/install.log 2>&1
   WAIT ""
   SAVE_FILES
fi
   
}

INITINSTALL() {
$DIALOG --no-collapse --cr-wrap --colors --title "\Z1WARNING\Z0" --backtitle "$TITLE" --yesno "\n\Z4http://www.brazilfw.com.br\Z0\n\n\Z1Attention !!!\n\nThis software will partition and format your hark disk.\nIf you go on any data stored on it will be permanently destroyed.\nI'm not responsible for any data loss or hardware damage.\nUSE IT AT YOUR OWN RISK.\Z0\n\nDo you want to go ahead?" 16 74
case $? in
     0) LISTHD;;
     1) QUIT;;
esac
}


INITINSTALL

