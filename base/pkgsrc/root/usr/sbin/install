#!/bin/sh
#Version 2.0 (26/11/2010) --> naufragoweb
#Cahngelog:
#Sex 07 Jan 2011 12:32:16 BRST  --> add change disk for second partition (naufragoweb)


INSTDIR='/tmp/install'
SRCDIR_SOURCE="/mnt"

check_yn() {
   YN=""
   while [ "$YN" = "" ]; do
         echo -n "$@"
         read YN
         [ "$YN" = "y" ] && YN="Y"
         [ "$YN" = "n" ] && YN="N"
         [ "$YN" = "Y" ] || [ "$YN" = "N" ] || YN=""
   done
}

abort() {
   umount $INSTDIR 2&>1 
   rm -rf $INSTDIR
   umount /mnt 2&>1
   echo
   echo "[0;31mInstalation Aborted. Press [ENTER][0m"
   echo
   read junk
   exit
}

echo "[0;32m           ==================================[0m"
echo "[0;32m           |       SmartRouter Project      |[0m" 
echo "[0;32m           ==================================[0m"
echo
echo
echo "[0;33m           ++++++++++++++++++++++++++++++++++[0m"
echo "[0;33m           +        System Installer        +[0m"
echo "[0;33m           ++++++++++++++++++++++++++++++++++[0m"
echo 
echo
echo 
echo "[0;31m   Attention !!![0m"
echo 
echo
echo "This software will partition and format your hard disk."
echo "If you go on any data stored on it will be permanently destroyed."
echo "I'm not responsible for any data loss or hardware damage."
echo "[0;31mUSE IT AT YOUR OWN RISK.[0m"
echo
echo

check_yn "Do you want to go ahead ? (y/n) - "
[ "$YN" = "N" ] && abort

echo
echo "[0;33mDetect your CPU instaled:[0m"
CPU=`grep "model name" /proc/cpuinfo | cut -f 2 -d ':' | uniq`
VENDOR=`grep "vendor_id" /proc/cpuinfo | cut -f 2 -d ':' | uniq`
echo
echo "Vendor   = [1m$VENDOR[0m"
echo "CPU      = [1m$CPU[0m"
echo
echo "SmartRouter system support CPU multiple cores,"
echo "You choose the kernel single core (1 core CPU)"
echo "or a kernel SMP cores (2 or + cores CPU)"
echo 
SMP=
while [ "$SMP" = "" ]; do 
         echo "Options:"
         echo
         echo " [0;33m1) kernel single [0m"
         echo
         echo " [0;33m2) kernel SMP [0m"
         echo
         echo -n "Choose your kernel system : "
         read junk
         if [ -z "$junk" ]; then
              { echo "[0;31mERROR! Try again![0m"; SMP=""; }
            else
              case $junk in
                   1) SMP="0" ;;
                   2) SMP="1" ;;
                   *) { echo "[0;31mERROR! Try again![0m"; SMP="";} ;;
              esac
         fi
done
umount $INSTDIR 2&>1
rm -rf $INSTDIR
mkdir  $INSTDIR
mount tmpfs $INSTDIR -t tmpfs -o size=32M

echo "Reading the install media..."
. /tmp/boot.info
mount -o ro $DEVICE /mnt -t $FSTYPE 2&>1 || { echo "Error trying to read the install media."; abort; }

for F in `ls /mnt/*.tgz`; do
    F=`basename $F .tgz`
    echo $F >> $INSTDIR/pkg.list
done;

echo
echo "Please wait. Reading System files..."
mkdir $INSTDIR/temp
mkdir $INSTDIR/temp/config
cp ${SRCDIR_SOURCE}/*.tgz        $INSTDIR/temp 2&>1 
cp ${SRCDIR_SOURCE}/SRP.dpy      $INSTDIR/temp 2&>1 
cp ${SRCDIR_SOURCE}/syslinux.cfg $INSTDIR/temp 2&>1
cp ${SRCDIR_SOURCE}/linux        $INSTDIR/temp 2&>1  
cp -a ${SRCDIR_SOURCE}/config/*  $INSTDIR/temp/config 2&>1

if [ "$SMP" = "1" ]; then
   cp ${SRCDIR_SOURCE}/SMP/linux            $INSTDIR/temp 2&>1
   cp ${SRCDIR_SOURCE}/SMP/modules.tgz      $INSTDIR/temp 2&>1
fi  

umount /mnt 2&>1
hd=
iface=
size=
upgrade=no
format=yes
upgrade_addons=no
have_addons=no
have_obsolete=no
use_cache=no
mbs=
mbs_cache=
echo "Detecting your Hard Disks..."
echo
echo
hds=`detecthds | wc -l`
treatline() {
   type=`echo $LINE | cut -f 1 -d "#"`
   hd=`echo $LINE | cut -f 2 -d "#"`
   model=`echo $LINE | cut -f 3 -d "#"`
   size=`echo $LINE | cut -f 4 -d "#"`
   cyl=`echo $LINE | cut -f 5 -d "#"`
   head=`echo $LINE | cut -f 6 -d "#"`
   sect=`echo $LINE | cut -f 7 -d "#"`
   case $hd in
        hda) iface="Primary Master";;
        hdb) iface="Primary Slave";;
        hdc) iface="Secondary Master";;
        hdd) iface="Secondary Slave";;
        sda) iface="First Device";;
        sdb) iface="Second Device";;
        sdc) iface="Third Device";;
        sdd) iface="Fourth Device";;
        sde) iface="Fifth Device";;
        *) iface="Unknow";;
   esac
}
showhd() {
   echo $number")" $type - $iface - $size MB
   echo $model
   echo
}

defined_disk() {
number=0
detecthds | while read LINE; do
                        number=$(($number+1))
                        treatline
                        showhd
                  done;
voltar=1
while [ "$voltar" = 1 ]; do
      echo -n "Choose the hard disk you want to install : "
      read junk
      numb=0
      LINE=
      echo -n > $INSTDIR/line
      detecthds | while read LINE; do
                        numb=$((numb+1))
                        [ "$numb" = "$junk" ] && echo $LINE > $INSTDIR/line
                        number="$numb"
                  done;
      LINE=`cat $INSTDIR/line`
      [ -n "$LINE" ] && voltar=0
      treatline
done;
echo
echo "You choose:"
showhd
}

disk_default_cache() {
device_cache="$device"2 
cyl_first=$((($mbs*1024*1024)/($head*$sect*512)))
cyl_remaining=$(($cyl-$cyl_first))
if [ "$(($cyl_remaining*$head*$sect/2048))" -le "5000" ]; then
   default_mbs_cache=$(($cyl_remaining*$head*$sect/2048))
   size_cache=$(($cyl_remaining*$head*$sect/2048))
else
   default_mbs_cache="5000"
   size_cache=$(($cyl_remaining*$head*$sect/2048))
fi
}

case "$hds" in
   0 )
      echo "There isn't any hard disk installed in this computer"
      echo "If you plugged one already check the cables and be sure"
      echo "it was detected by the BIOS."
      echo
      abort
      ;;
   1 )
      LINE=`detecthds`
      treatline
      number=1
      showhd
      ;;
   * )
      echo "[0;34mDefined Disk to install de System[0m"
      defined_disk
      ;;
esac

.
check_yn "Are you sure you want to install the System to this Hard Disk ? (y/n) - "
[ "$YN" = "N" ] && abort

device="/dev/$hd"
boot_par="$device"1

echo
echo "Trying to detect an upgradable previous version of System Linux"
echo
echo "[0;31mIt is normal to see some error messages here, they mean only[0m"
echo "[0;31mthis HD does not have any previous system version on it[0m"
echo
mount $boot_par /mnt -t vfat > /dev/null 2&>1
if [ $? = 0 ]; then
   version=
   if [ -e "/mnt/config/coyote.cfg" ]; then
      if [ -e "/mnt/brazilfw.dpy" ]; then
          version=`cat /mnt/brazilfw.dpy | grep "BrazilFW" | awk '{print}'`
      elif [ -e "/mnt/syslinux.dpy" ]; then
          version=`cat /mnt/syslinux.dpy | grep "BrazilFW" | awk '{print}'`
      elif [ -e "/mnt/SRP.dpy" ]; then
          version=`cat /mnt/SRP.dpy | grep "SmartRouter" | awk '{print}'`
      elif [ -e "/mnt/syslinux.dpy" ]; then
          version=`cat /mnt/syslinux.dpy | grep "SmartRouter" | awk '{print}'`
      fi
   fi
   if [ -n "$version" ]; then
      echo
      echo "[0;33m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[0m"
      echo "[0;33m+     System Linux Version found into your device :      +[0m" 
      echo "             [0;31m $version [0m"
      echo "[0;33m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[0m"
      echo
      echo
      echo "This hard disk contains an upgradable version of System Linux"
      echo "you can upgrade it and keep your configurations"
      echo
      check_yn "Do you want to upgrade this instalation ? (y/n) - "
      if [ "$YN" = "Y" ]; then
         echo
         echo
         echo "Now you can choose if you want to format this disk again or just"
         echo "upgrade the system files preserving your logs and cache."
         echo "  If you want to preserve the data on second partition you should not format it"
         echo "  If you want to change the size of current partitions you must format it"
         echo
         check_yn "Do you want to format this disk again ? (y/n) - "
         [ "$YN" = "N" ] && format=no

         echo
         echo "Saving current configurations..."
         mkdir $INSTDIR/upgrade
         cp -a /mnt/config/* $INSTDIR/upgrade
         [ -e /mnt/ssh_keys.tgz ] && cp /mnt/ssh_keys.tgz $INSTDIR
         rm -rf $INSTDIR/upgrade/language.gz
         echo "Done."
         echo
         upgrade=yes

         echo "Looking for obsolete add-ons"
         for F in `ls /mnt/*.tgz`; do
             F=`basename $F .tgz`
             if [ -n "`grep $F /var/lib/lrpkg/addons.obsolete`" ]; then
                echo $F >> $INSTDIR/pkg.list3
                have_obsolete=yes
             fi
         done;
         if [ "$have_obsolete" = "yes" ]; then
            echo
            echo "The following obsolete add-ons were found on current instalation"
            echo "and will be DELETED."
            cat $INSTDIR/pkg.list3
            echo
            read junk
         else
            touch $INSTDIR/pkg.list3
         fi

         echo "Looking for upgradable add-ons"
         for F in `ls /mnt/*.tgz`; do
             F=`basename $F .tgz`
             if [ -z "`grep $F $INSTDIR/pkg.list`" -a -z "`grep $F $INSTDIR/pkg.list3`" ]; then
                echo $F >> $INSTDIR/pkg.list2
                have_addons=yes
             fi
         done;
         if [ "$have_addons" = "yes" ]; then
            echo
            echo "The following upgradable add-ons were found on current instalation"
            cat $INSTDIR/pkg.list2
            echo
            check_yn "Do you want to keep them ? (y/n) - "
            if [ "$YN" = "Y" ]; then
               mkdir $INSTDIR/oldpacks
               cat $INSTDIR/pkg.list2 | while read f; do
                                              cp /mnt/$f.tgz $INSTDIR/oldpacks
                                        done;
               echo "Done."
               echo
               upgrade_addons=yes
            fi
         fi
      fi
   fi
fi
umount /mnt > /dev/null 2&>1

if [ "$format" = "yes" ]; then
   min_part=$(($head*$sect/2048))
   echo $iface - $size MB
   echo $model
   sfdisk -g $device
   echo
   default_mbs=40
   [ $size -lt $default_mbs ] && default_mbs=$size
   while [ "$mbs" = "" ]; do
         echo
         echo -n "Set the size of partition to create in Megabytes (default=$default_mbs MB) : "
         read junk
         [ -z "$junk" ] && mbs=$default_mbs
         [ -n "$junk" ] && mbs=$junk
         if [ "$mbs" -lt 8 ]; then
            echo "Too little. Set at least 8 Megabytes"
            mbs=
         elif [ "$mbs" -lt $min_part ]; then
              echo "Too little. The smaller partition for this hd is $min_part Megabytes"
              mbs=
         elif [ "$mbs" -gt 1000 ]; then
              echo "Too big. Set at most 1000 Megabytes"
              mbs=
         elif [ "$mbs" -gt $size ]; then
              echo "Too big. The hd has only $size Megabytes"
              mbs=
         fi
   done;

   echo
   echo "If you are planning to install some proxy cache to this"
   echo "Smart Router you can create a second partition using the"
   echo "rest of this HD."
   echo
   check_yn "Do you want to create a second partition ? (y/n) - "
   [ "$YN" = "Y" ] && use_cache=yes

   if [ "$use_cache" = "yes" ]; then
      case "$hds" in
            1 )
               disk_default_cache
               ;;
            * )
               echo "[0;34mDefined disk for install Second Partition (/partition)[0m"
               defined_disk
               device_cache="/dev/$hd"
               if [ "$device_cache" -eq "$device" ]; then
                  disk_default_cache
               else
                  min_part=$(($head*$sect/2048))
                  echo "$iface - $size MB"
                  echo "$model"
                  sfdisk -g $device_cache
                  default_mbs_cache="5000"
                  size_cache="$size"
               fi
               echo
               if [ "$size_cache" -lt "$default_mbs_cache" ]; then
                  default_mbs_cache="$size_cache"
               else
                  echo
                  echo "[0;31mWARNNING!!![0m"
                  echo "It is strongly recommended not to exceed the default size for the second"
                  echo "partition. Sizes larger than recommended may cause serious problems for "
                  echo "your system. If you want to continue with a larger size, is at your own"
                  echo "risk."
               fi   
               ;;
      esac        
      while [ "$mbs_cache" = "" ]; do
            echo
            echo "default          =$default_mbs_cache MB"
            echo "maximum allowed  =$size_cache MB"
            echo
            echo -n "Set the size of partition to create in Megabytes  : "
            read junk
            [ -z "$junk" ] && mbs_cache=$default_mbs_cache
            [ -n "$junk" ] && mbs_cache=$junk
            if [ "$mbs_cache" -lt 3 ] ; then
               echo "Too little. Set at least 3 Megabytes"
       	       mbs_cache=
            elif [ "$mbs_cache" -lt $min_part ]; then
                 echo "Too little. The smaller partition for this hd is $min_part Megabytes"
                 mbs_cache=
            elif [ "$mbs_cache" -gt $default_mbs_cache ]; then
                 if [ "$default_mbs_cache" -eq "$(($cyl_remaining*$head*$sect/2048))" ]; then
                    echo "Too big. The hd has only $default_mbs_cache Megabytes remaining"
                    mbs_cache=
                 else
                    mbs_cache=$junk
                 fi
            fi
      done;
      echo
      echo "[0;34m          +++++++++++++++++++++++++++++++++++++++++++++++++[0m"
      echo "[0;34m          +         Type for second partition             +[0m"
      echo "[0;34m          +++++++++++++++++++++++++++++++++++++++++++++++++[0m"
      echo
      echo "The filesystem recommended format second partition is ext2 (option recommended)"
      echo
      while [ "$type_cache_par" = "" ]; do
            echo "Options:"
            echo
            echo "[0;33m1 ) ext2[0m"
            echo
            echo "[0;33m2 ) ext3[0m"
            echo
            echo -n "Choose the type for filesystem on second partition : "
            read junk
            if [ -z "$junk" ]; then
               { type_cache_par=""; echo "[0;31mERROR! Try again![0m"; }
            else
               case $junk in 
                    1 )
                       { type_cache_par=ext2; echo "The default value (ext2) are selected."; }
                       ;;
                    2 )
                       { type_cache_par=ext3; echo "The filesystem ext3 are selected."; }
                       ;;
                    * )
                       { echo "[0;31mERROR! Try again![0m"; type_cache_par="";}
                       ;;
               esac
            fi
      done;      
   fi
   echo
   echo
   echo "[0;33m          ###############################################[0m"
   echo "[0;33m          #                 ATTENTION !!!               #[0m"
   echo "[0;33m          ###############################################[0m"
   echo
   echo "This hard disk will be partitioned and formated now."
   echo "If you go on any data stored on it will be permanently destroyed."
   echo
   check_yn "Are you sure you want to do this ? (y/n) - "
   [ "$YN" = "N" ] && abort

   echo
   echo "Cleaning MBR..."
   dd if=/bin/clean.mbr of=$device count=1 || { echo "Error Cleaning MBR"; abort; }

   cyl=$((($mbs*1024*1024)/($head*$sect*512)))
   command="0,$cyl,b,*"

   if [ "$use_cache" = "yes" ]; then
      cache_par="$device_cache"
      cyl_cache=$((($mbs_cache*1024*1024)/($head*$sect*512))) 
      if [ "$device_cache" = "$device"2 ]; then
         command="$command\n,$cyl_cache,83,"
      else
         command2="0,$cyl_cache,83,"
      fi
   fi
   echo $command
   echo
   echo "[0;33m             ======================================[0m"
   echo "[0;33m              Create partition tables on $device...[0m"
   echo "[0;33m             ======================================[0m"
   echo -e $command | sfdisk -q $device || { echo "Error Partitioning "; abort; }
   if [ -n "$command2" ]; then
      echo "Cleaning MBR..."
      dd if=/bin/clean.mbr of=$device_cache count=1 || { echo "Error Cleaning MBR"; abort; }
      echo $command2
      echo
      echo "[0;33m             ============================================[0m"
      echo "[0;33m              Create partition tables on $device_cache...[0m"
      echo "[0;33m             ============================================[0m"
      echo -e $command2 | sfdisk -q $device_cache || { echo "Error Partitioning "; abort; }
   fi

   echo
   echo "[0;33m         =================================================[0m"
   echo "[0;33m          Creating FAT32 file system on primary partition [0m "
   echo "[0;33m         =================================================[0m"
   mkdosfs $boot_par || { echo "Error Creating DOS file system"; abort; }
 
   if [ "$use_cache" = "yes" ]; then
      echo
      echo "[0;33m         =======================================================[0m"
      echo "[0;33m          Creating Linux file system on second partition...[0m"
      echo "[0;33m         =======================================================[0m"
      /bin/mke2fs $cache_par -F -m 0 -i 16384 -b 4096 || { echo "Error Creating LINUX file system ext2 on second partition"; abort; }
      case "$type_cache_par" in
        ext2 )
           echo "[0;33m               =============================================[0m"
           echo "[0;33m                Adjust tunable filesystem parameters on ext2[0m"
           echo "[0;33m               =============================================[0m"
           /bin/tune2fs -f -c 0 -i 0 $cache_par
           ;;
        ext3 )
           echo "[0;33m              ===================================================[0m"
           echo "[0;33m               Creating Linux journaling on second partition and[0m"
           echo "[0;33m                 adjust tunable filesystem parameters on ext3[0m"
           echo "[0;33m              ===================================================[0m"
           /bin/tune2fs -f -c 0 -i 0 -j -O dir_index,has_journal -o journal_data_writeback $cache_par 
           ;;
      esac
   echo "[0;33m           =======================================================[0m"
   echo "[0;33m            Check, fix and optimize directories in filesystem ...[0m"
   echo "[0;33m           =======================================================[0m"
   /bin/e2fsck -yfD $cache_par
   case "$?" in
     "0"|"1"|"2" )
            echo "Done." ;;
    "4"|"8"|"32" )
            echo "[0;31mOne or more errors as occurred. Running e2fsck a manual options:[0m"
            /bin/e2fsck -fD $cache_par ;;
      "16"|"128" ) 
             echo "[0;31mERROR![0m Please, restart the system and try install again."
             echo "If this not solve this error, please analize your disk or replace this."
             abort ;;
   esac  
   echo
   fi
else
   echo "READY TO GO !!!"
   echo "This system will be upgraded now."
   echo
   check_yn "Are you sure you want to do this ? (y/n) - "
   [ "$YN" = "N" ] && abort
fi
 
echo
echo "Installing Boot Loader0..."
syslinux -s $boot_par || { echo "Error installing Syslinux"; abort; }
 
echo
echo "Mounting the new partition"
mount -t vfat $boot_par /mnt || { echo "Error mounting new partition"; abort; }

sync

echo
echo "Copying Files. Please wait..."

if [ "$upgrade_addons" = "yes" ]; then
   cp $INSTDIR/oldpacks/* /mnt 2&>1
else
   [ -e $INSTDIR/pkg.list2 ] && cat $INSTDIR/pkg.list2 | while read f; do
                                                               [ -n "$f" ] && rm -rf /mnt/$f.tgz
                                                         done;
fi

if [ "$have_obsolete" = "yes" ]; then
   [ -e $INSTDIR/pkg.list3 ] && cat $INSTDIR/pkg.list3 | while read f; do
                                                               [ -n "$f" ] && rm -rf /mnt/$f.tgz
                                                         done;
fi

cp $INSTDIR/temp/* /mnt 2&>1
mkdir /mnt/config 2&>1
cp -a $INSTDIR/temp/config/* /mnt/config 2&>1

if [ "$upgrade" = "yes" ]; then
   cp -a $INSTDIR/upgrade/* /mnt/config 2&>1
   [ -e $INSTDIR/ssh_keys.tgz ] && cp $INSTDIR/ssh_keys.tgz /mnt
fi
sync

check_yn "Mark the boot on syslinux.cfg? - You can find problems (y/n) - "
if [ "$YN" = "Y" ]; then
SYSLINUX=`cat /mnt/syslinux.cfg`
echo "1 sed"
echo -en $(echo -e "$SYSLINUX" | sed 's/[ ]\ */\\\\012/g') > /tmp/changeboot.tmp
VARBOOT=`cat /tmp/changeboot.tmp | grep -e "^boot="`
rm -f /tmp/changeboot.tmp 2>/dev/null
echo "2 sed"
[ -n "$VARBOOT" ] && SYSLINUX=`echo -en "$SYSLINUX" | sed 's\~" $VARBOOT"~" boot=$boot_par"~g'` || SYSLINUX=`echo -en "$SYSLINUX boot=$boot_par"`
echo -en "$SYSLINUX" > /mnt/syslinux.cfg
fi
#changeboot -boot $boot_pardisk_default_cache
[ $device = "/dev/hd*" ] && echo "teste"

umount $INSTDIR 2&>1
rm -rf $INSTDIR
umount /mnt
echo
echo
echo
echo "[0;33m*******************  Done. **********************[0m"
echo
echo
echo
echo "Your instalation is done."
echo
echo "Remove any instalation CD from your drives"
echo "Set the BIOS to boot from device installed on $iface"
echo
check_yn "Reboot the system now ? (y/n) - "
if [ "$YN" = "Y" ]; then
   touch /tmp/reboot
   reboot
fi
